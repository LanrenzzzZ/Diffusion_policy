# @package _global_

seed: 1000
dataset_repo_id: lerobot/aloha_sim_transfer_cube_human

override_dataset_stats:
  observation.images.top:
    # stats from imagenet, since we use a pretrained vision model
    mean: [[[0.485]], [[0.456]], [[0.406]]]  # (c,1,1)
    std: [[[0.229]], [[0.224]], [[0.225]]]  # (c,1,1)

training:
  offline_steps: 200000
  online_steps: 0
  eval_freq: 5000
  save_freq: 10000
  save_checkpoint: true
  num_workers: 16
  batch_size: 32
  lr: 1e-4
  lr_backbone: 1e-5
  weight_decay: 1e-4
  grad_clip_norm: 10
  online_steps_between_rollouts: 1

  delta_timestamps:
    # action: "[i / ${fps} for i in range(${policy.chunk_size})]"
    # observation.images.top: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    # observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.n_action_steps})]"
 

env:
  name: aloha
  task: AlohaTransferCube-v0
  from_pixels: true
  pixels_only: false
  image_size:
  - 3
  - 480
  - 640
  episode_length: 400
  fps: 50
  state_dim: 14
  action_dim: 14

wandb:
  enable: True
  disable_artifact: true
  project: lerobot
  notes: 'gpt'


eval:
  n_episodes: 100
  batch_size: 10

# See `configuration_act.py` for more details.
policy:
  name: gpt

  # Input / output structure.
  n_obs_steps: 1
  chunk_size: 16 # chunk_size
  n_action_steps: 16

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.images.top: [3, 480, 640]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.images.top: mean_std
    observation.state: mean_std
  output_normalization_modes:
    action: mean_std

  # Architecture.
  # Vision backbone.
  vision_backbone: resnet18
  pretrained_backbone_weights: ResNet18_Weights.IMAGENET1K_V1
  replace_final_stride_with_dilation: false
  # Transformer layers.
  pre_norm: false
  dim_model: 512
  n_heads: 8
  dim_feedforward: 3200
  feedforward_activation: relu
  n_encoder_layers: 4
  # Note: Although the original ACT implementation has 7 for `n_decoder_layers`, there is a bug in the code
  # that means only the first layer is used. Here we match the original implementation by setting this to 1.
  # See this issue https://github.com/tonyzhaozh/act/issues/25#issue-2258740521.
  n_decoder_layers: 1


  # Inference.
  temporal_ensemble_coeff: 0.01

  # Training and loss computation.
  dropout: 0.1

